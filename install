#! /bin/bash -
#
# Package:       Axiom
# File:          install
# Summary:       install script for the Axiom package
# Maintainer:    David Wicksell <dlw@linux.com>
# Last Modified: Oct 22, 2012
#
# Written by David Wicksell <dlw@linux.com>
# Copyright Â© 2011,2012 Fourth Watch Software, LC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License (AGPL)
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see http://www.gnu.org/licenses/.
#
# This script is written to be run in a Red Hat or Ubuntu environment.
# Tweaks maybe needed for other distributions.


# Usage message
function Usage
{
  echo "Usage: ${SCRIPT} [-q]"
  echo "    or ${SCRIPT} -h"
} # End of Usage

#find out if they want to overwrite, backup, or append configuration files
function Question
{
  echo "There is a $1 file installed already."
  echo "Would you like to make a backup of it, and install the"
  echo "package version, append the options that are required"
  echo "to the end of it, or overwrite the file completely?"
  echo
  echo "Please choose the number of the option you want."

  select ANSWER in backup append overwrite quit
  do
    case ${ANSWER} in 
    backup)
      cp -p ~/$1 ~/$1.orig

      echo "Your old $1 is now ${HOME}/$1.orig"

      cp -p ${1/"."/} ~/$1

      echo "Installed new $1 file"
      echo

      break
      ;;
    append)
      cat ${1/"."/} | sed "s/^set/\"set/" >> ~/$1 #don't set things in append

      echo "Appended the relevant configuration options to"
      echo "the end of $1"
      echo

      break
      ;;
    overwrite)
      #be extra careful with the overwrite option
      echo -n "You have chosen to ${ANSWER} ${HOME}/$1, proceed? [Y]/N "
      read ANS

      ANS=`echo ${ANS} | tr [:lower:] [:upper:]`

      if [ "${ANS}" == "Y" -o "${ANS}" == "YES" -o "${ANS}" == "" ]
      then
        cp -p ${1/"."/} ~/$1

        echo "Installed new $1 file"
        echo

        break
      else
        continue
      fi
      ;;
    quit)
      cd -  > /dev/null #change back to the directory we started from

      exit 0
      ;;
    *)
      echo -n "Please choose the number of the option you want. "
      echo
    esac
  done
} # End of Question


#install script starts here
SCRIPT=`basename $0`
QUIET=off

#only care about -q (quiet mode), or -h (help) but ignore all other arguments
while getopts :hq OPT
do
  case ${OPT} in
  h) #help
    Usage

    exit 0
    ;;
  q) #Quiet mode
    QUIET=on
    ;;
  '?') #invalid option
    echo "-${OPTARG} is not a valid option"

    Usage

    exit 1
    ;;
  esac
done

if [ "${QUIET}" == "off" ]
then
  clear
fi

cd `find ~ -type d -name axiom -print` #need to install from the repository

OS=`lsb_release -is` #Ubuntu and Red Hat do a few things differently

if [ -z "${gtmroutines}" ]
then
  if [ "${QUIET}" == "off" ]
  then
    echo The \$gtmroutines environment variable is not defined. In order to use
    echo the global dumping functionality of Axiom you have to install GT.M
    echo and KBAWDUMP.m, as well as define \$gtmroutines. See the documentation:
    echo     http://www.fisglobal.com/products-technologyplatforms-gtm/
    echo
  fi
else
  DIR=`echo ${gtmroutines} | awk '{print $1}'`

  if [[ ${DIR} != ${DIR/"("/} ]] #$gtmroutines with "()" source syntax
  then
    DIR=`echo ${DIR} | cut -d "(" -f 2 | cut -d ")" -f 1`
  fi

  cp -p KBAWDUMP.m ${DIR}/

  if [ "${QUIET}" == "off" ]
  then
    echo Copied the KBAWDUMP.m global dumping routine to ${DIR}/
    echo See the man page for details on how to use it. E.g. $ man KBAWDUMP
    echo
  fi
fi

if [ ! -d ~/bin ]
then
  mkdir ~/bin
fi

cp -p mktags ~/bin/

if [ "${QUIET}" == "off" ]
then
  echo Copied the mktags shell script to ${HOME}/bin/
  echo
  echo Run mktags to build the tags file for the mtags functionality.
  echo See the man page for details on how to use it. E.g. $ man mktags
  echo
fi

if [[ $PATH == ${PATH/"${HOME}/bin"/} ]] #does $PATH contain ~/bin?
then
  if [ "${OS}" == "Ubuntu" -o "${OS}" == "LinuxMint" ]
  then
    echo "export PATH=\$HOME/bin:\$PATH" >> ~/.profile

    if [ "${QUIET}" == "off" ]
    then
      echo Appended a command to add \$HOME/bin to \$PATH in ~/.profile
      echo
    fi
  else
    echo "export PATH=\$HOME/bin:\$PATH" >> ~/.bash_profile

    if [ "${QUIET}" == "off" ]
    then
      echo Appended a command to add \$HOME/bin to \$PATH in ~/.bash_profile
      echo
    fi
  fi
fi

if [ ! -d ~/man/man1 ]
then
  mkdir -p ~/man/man1
fi

cp -p mktags.1 KBAWDUMP.1 ~/man/man1/
gzip -f9 ~/man/man1/{mktags,KBAWDUMP}.1 #compress the man pages

if [ "${QUIET}" == "off" ]
then
  echo Copied the mktags and KBAWDUMP man pages to $HOME/man/man1/
  echo
  echo In order to install them system-wide, you need to be root. Consult the
  echo SEE ALSO section of the man page on how to do this. E.g. $ man man
  echo
fi

if [ "${OS}" == "Ubuntu" -o "${OS}" == "LinuxMint" ]
then
  export MANPATH=:~/man #putting a colon at the beginning is a trick

  mandb -q

  if [ "${QUIET}" == "off" ]
  then
    echo Added the ~/man/ directory to \$MANPATH, and rebuilt the database
    echo
  fi
else
  if grep -q MANPATH ~/.bash_profile
  then
    if [ "${QUIET}" == "off" ]
    then
      echo Make sure \$HOME/man is in the \$MANPATH variable in ~/.bash_profile
    fi
  else
    echo >> ~/.bash_profile
    echo "export MANPATH=\$HOME/man:`manpath`" >> ~/.bash_profile

    if [ "${QUIET}" == "off" ]
    then
      echo Appended a command to add \$HOME/man to \$MANPATH in ~/.bash_profile
    fi
  fi

  if [ "${QUIET}" == "off" ]
  then
    echo To access your man pages now, type: $ source ~/.bash_profile
    echo
  fi
fi

if [ "${QUIET}" == "off" ]
then
  if [ -f ~/.vimrc ]
  then
    echo -n "Please type <Enter> to continue: "
    read X

    clear

    Question .vimrc
  else
    cp -p vimrc ~/.vimrc

    echo "Installed new .vimrc file"
    echo
  fi

  if [ ! -d ~/.vim ]
  then
    cp -aT vim ~/.vim

    echo Copied the Vim utility package to ~/.vim/
    echo
  else
    if [ -f ~/.vim/filetype.vim ]
    then
      echo -n "Please type <Enter> to continue: "
      read X

      clear

      Question .vim/filetype.vim
    else
      cp -p vim/filetype.vim ~/.vim/

      echo "Installed new filetype.vim file"
      echo
    fi

    if [ -f ~/.vim/scripts.vim ]
    then
      echo -n "Please type <Enter> to continue: "
      read X

      clear

      Question .vim/scripts.vim
    else
      cp -p vim/scripts.vim ~/.vim/

      echo "Installed new scripts.vim file"
      echo
    fi

    if [ ! -d ~/.vim/doc ]
    then
      mkdir ~/.vim/doc
    fi

    cp -p vim/doc/axiom.txt ~/.vim/doc/

    echo Copied vim/doc/axiom.txt to ~/.vim/doc/
    echo

    if [ ! -d ~/.vim/ftplugin ]
    then
      mkdir ~/.vim/ftplugin
    fi

    cp -a vim/ftplugin/mumps ~/.vim/ftplugin/

    echo Copied vim/ftplugin/mumps/*.vim to ~/.vim/ftplugin/mumps/
    echo

    if [ ! -d ~/.vim/plugin ]
    then
      mkdir ~/.vim/plugin
    fi

    if [ -f ~/.vim/plugin/templates.vim ]
    then
      echo -n "Please type <Enter> to continue: "
      read X

      clear

      Question .vim/plugin/templates.vim
    else
      cp -p vim/plugin/templates.vim ~/.vim/plugin/

      echo "Installed new templates.vim file"
      echo
    fi

    if [ ! -d ~/.vim/syntax ]
    then
      mkdir ~/.vim/syntax
    fi

    cp -p vim/syntax/mumps.vim ~/.vim/syntax/

    echo Copied vim/syntax/mumps.vim to ~/.vim/syntax/
    echo

    if [ ! -d ~/.vim/templates ]
    then
      mkdir ~/.vim/templates
    fi

    cp -p vim/templates/*.{tpl,pat} ~/.vim/templates/

    echo Copied vim/templates/*.{tpl,pat}
    echo to ~/.vim/templates/
    echo
  fi
else
  cp -p vimrc ~/.vimrc
  cp -aT vim ~/.vim
fi

vim "+helptags ${HOME}/.vim/doc" "+quit"

if [ "${QUIET}" == "off" ]
then
  echo "Installed the Vim help documentation"
  echo

  echo "Finished installing the Axiom package"
fi

cd - > /dev/null #change back to the directory we started from

exit 0
